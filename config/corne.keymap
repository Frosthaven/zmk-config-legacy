/* CUSTOM FIRMWARE BELOW THIS LINE *********************************************
   https://zmkfirmware.dev/docs/codes/
   https://zmkfirmware.dev/docs/features/keymaps
   https://zmkfirmware.dev/docs/behaviors/key-press
   https://zmkfirmware.dev/docs/behaviors/layers
*******************************************************************************/
/*
 * Firmware modification by Frosthaven
 * <shane.stanley1983@gmail.com>
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

/ {
  keymap {
    compatible = "zmk,keymap";



    default_layer { // 0
//  TAB  |   Q   |   W   |   E   |   R   |   T   ||   Y   |   U   |   I   |   O   |   P   | BKSPC
// CNTRL |   A   |   S   |   D   |   F   |   G   ||   H   |   J   |   K   |   L   |  ; :  |  ' "
// LSHFT |   Z   |   X   |   C   |   V   |   B   ||   N   |   M   |  , <  |  . >  |  / ?  | RSHFT
//                          ALT  | LOWER | SPACE || ENTER | RAISE |  GUI
      bindings = <
        &kp TAB   &kp Q &kp W     &kp E   &kp R &kp T &kp Y &kp U &kp I     &kp O   &kp P    &kp BSPC
        &kp LCTRL &kp A &kp S     &kp D   &kp F &kp G &kp H &kp J &kp K     &kp L   &kp SEMI &kp SQT
        &kp LSHFT &kp Z &kp X     &kp C   &kp V &kp B &kp N &kp M &kp COMMA &kp DOT &kp FSLH &kp RSHFT
        &kp LALT  &mo 5 &kp SPACE &kp RET &mo 6 &kp LGUI
      >;
    };



    dvorak_layer { // 1
// _____ |  ' "  |  , <  |  . >  |   P   |   Y   ||   F   |   G   |   C   |   R   |   L   | _____
// _____ |   A   |   O   |   E   |   U   |   I   ||   D   |   H   |   T   |   N   |   S   |  / ? 
// _____ |  ; :  |   Q   |   J   |   K   |   X   ||   B   |   M   |   W   |   V   |   Z   | _____
//                         _____ | _____ | _____ || _____ | _____ | _____
      bindings = <
        &trans &kp SQT  &kp COMMQ &kp DOT &kp P  &kp Y &kp F &kp G &kp C &kp R &kp L &trans
        &trans &kp A    &kp O     &kp E   &kp U  &kp I &kp D &kp H &kp T &kp N &kp S &kp FSLH
        &trans &kp SEMI &kp Q     &kp J   &kp K  &kp X &kp B &kp M &kp W &kp V &kp Z &trans
        &trans &trans   &trans    &trans  &trans &trans
      >;
    };


/*
    colemak_layer { // 2
// _____ |   Q   |   W   |   F   |   P   |   G   ||   J   |   L   |   U   |   Y   |  ; :  | _____
// _____ |   A   |   R   |   S   |   T   |   D   ||   H   |   N   |   E   |   I   |   O   |  ' "  
// _____ |   Z   |   X   |   C   |   V   |   B   ||   K   |   M   |  , <  |  . >  |  / ?  | _____
//                         _____ | _____ | _____ || _____ | _____ | _____
      bindings = <
        &trans &kp Q  &kp W  &kp F  &kp P  &kp G &kp J &kp L &kp U     &kp Y   &kp SEMI &trans
        &trans &kp A  &kp R  &kp S  &kp T  &kp D &kp H &kp N &kp E     &kp I   &kp O    &kp SQT
        &trans &kp Z  &kp X  &kp C  &kp V  &kp B &kp K &kp M &kp COMMA &kp DOT &kp FSLH &trans
        &trans &trans &trans &trans &trans &trans
      >;
    };



    colemak_dhm_layer { // 3
// _____ |   Q   |   W   |   F   |   P   |   B   ||   J   |   L   |   U   |   Y   |  ; :  | _____
// _____ |   A   |   R   |   S   |   T   |   G   ||   M   |   N   |   E   |   I   |   O   |  ' "  
// _____ |   Z   |   X   |   C   |   D   |   V   ||   K   |   H   |  , <  |  . >  |  / ?  | _____
//                         _____ | _____ | _____ || _____ | _____ | _____
      bindings = <
        &trans &kp Q  &kp W  &kp F  &kp P  &kp B &kp J &kp L &kp U     &kp Y   &kp SEMI &trans
        &trans &kp A  &kp R  &kp S  &kp T  &kp G &kp M &kp N &kp E     &kp I   &kp O    &kp SQT
        &trans &kp Z  &kp X  &kp C  &kp D  &kp V &kp K &kp H &kp COMMA &kp DOT &kp FSLH &trans
        &trans &trans &trans &trans &trans &trans
      >;
    };



    workman_layer { // 4
// _____ |   Q   |   D   |   R   |   W   |   B   ||   J   |   F   |   U   |   P   |  ; :  | _____
// _____ |   A   |   S   |   H   |   T   |   G   ||   Y   |   N   |   E   |   O   |   I   |  ' "  
// _____ |   Z   |   X   |   M   |   C   |   V   ||   K   |   L   |  , <  |  . >  |  / ?  | _____
//                         _____ | _____ | _____ || _____ | _____ | _____
      bindings = <
        &trans &kp Q  &kp D  &kp R  &kp W  &kp B &kp J &kp F &kp U     &kp P   &kp SEMI &trans
        &trans &kp A  &kp S  &kp H  &kp T  &kp G &kp Y &kp N &kp E     &kp O   &kp I    &kp SQT
        &trans &kp Z  &kp X  &kp M  &kp C  &kp V &kp K &kp L &kp COMMA &kp DOT &kp FSLH &trans
        &trans &trans &trans &trans &trans &trans
      >;
    };



    lower_layer { // 5
//  ESC  |   F1  |   F2  |   F3  |   F4  |   F5  ||   `   |   !   |   &   |   @   |   #   |  DEL 
// _____ |   F6  |   F7  |   F8  |   F9  |  F10  ||   $   |   (   |   {   |   [   |   |   |   ^  
// _____ |  F11  |  F12  |  F13  |  F14  |  F15  ||   _   |   )   |   }   |   ]   |   \   |   ~
//                         _____ | _____ | _____ || _____ | ADJUS |  APP  
      bindings = <
        &kp ESC &kp F1  &kp F2  &kp F3  &kp F4  &kp F5  &kp GRAVE &kp EXCL &kp AMPS &kp AT   &kp HASH      &kp DEL
        &trans  &kp F6  &kp F7  &kp F8  &kp F9  &kp F10 &kp DLLR  &kp LPAR &kp LBRC &kp LBKT &kp PIPE      &kp CARET
        &trans  &kp F11 &kp F12 &kp F13 &kp F14 &kp F15 &kp UNDER &kp RPAR &kp RBRC &kp RBKT &kp BACKSLASH &kp TILDE
        &trans  &trans  &trans  &tran   &mo 7   &kp K_APP
      >;
    };



    raise_layer { // 6
//  ESC  |  HOME |   UP  |  END  | ..... | MOUS2 ||  PGUP |   7   |   8   |   9   |   /   |   *  
//  CAPS |  LEFT |  DOWN | RIGHT | MOUSU | MOUS1 ||  PGDN |   4   |   5   |   6   |   -   |   +  
// NUMLK | ..... | ..... | MOUSL | MOUSD | MOUSR ||   .   |   1   |   2   |   3   |   %   |   =  
//                         _____ | ADJUS | _____ || KENTR | _____ |   0  
      bindings = <
        &kp ESC     &kp HOME &kp UP   &kp END      &none    &none     &kp PG_UP  &kp KP_N7 &kp KP_N8 &kp KP_N9 &kp KP_DIVIDE &kp KP_MULTIPLY
        &kp CAPS    &kp LEFT &kp DOWN &kp RIGHT    &none    &none     &kp PG_DN  &kp KP_N4 &kp KP_N5 &kp KP_N6 &kp MINUS     &kp PLUS
        &kp KP_NLCK &none    &none    &none        &none    &none     &kp KP_DOT &kp KP_N1 &kp KP_N2 &kp KP_N3 &kp PERCENT   &kp KP_EQUAL
        &trans      &mo 7    &trans   &kp KP_ENTER &trans   &kp KP_N0
      >;
    };



    adjust_layer { // 7
// _____ |  STOP | VOLUP |  PLAY | RGBBU | RGBEU ||  BT1  |  BT2  |  BT3  |  BT4  |  BT5  | RESET
// _____ |  PREV | VOLDN |  NEXT | RGBBD | RGBED || BTCLR | ..... | ..... | ..... | ..... |  BOOT
// _____ | ..... | ..... | ..... | ..... |  RGB  || QWERT | DVORK | CLMAK | CLDHM | WRKMN | .....
//                         _____ | _____ | _____ || _____ | _____ | _____
      bindings = <
        &trans &kp C_STOP &kp C_VOL_UP &kp C_PLAY_PAUSE &rgb_ug RGB_BRI &rgb_ug RGB_EFR &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4 &bt BT_SEL 5 &reset
        &trans &kp C_PREV &kp C_VOL_DN &kp C_NEXT       &rgb_ug RGB_BRD &rgb_ug RGB_EFF &bt BT_CLR   &none        &none        &none        &none &bootloader
        &trans &none      &none        &none            &none           &rgb_ug RGB_TOG &to 0        &to 1        &to 2        &to 3        &to 4 &none
        &trans &trans     &trans       &trans           &trans          &trans
      >;
    };


*/
  };
};















/* DEFAULT FIRMWARE BELOW THIS LINE ********************************************
*******************************************************************************/
/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 *

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

/ {
        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
// | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
// | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | SHFT |
//                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |
                        bindings = <
   &kp TAB   &kp Q &kp W &kp E &kp R &kp T   &kp Y &kp U  &kp I     &kp O   &kp P    &kp BSPC
   &kp LCTRL &kp A &kp S &kp D &kp F &kp G   &kp H &kp J  &kp K     &kp L   &kp SEMI &kp SQT
   &kp LSHFT &kp Z &kp X &kp C &kp V &kp B   &kp N &kp M  &kp COMMA &kp DOT &kp FSLH &kp RSHFT
                  &kp LGUI &mo 1 &kp SPACE   &kp RET &mo 2 &kp RALT
                        >;
                };
                lower_layer {
// -----------------------------------------------------------------------------------------
// |  ESC |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
// | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
// | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
   &kp ESC    &kp N1       &kp N2       &kp N3       &kp N4       &kp N5            &kp N6   &kp N7   &kp N8 &kp N9    &kp N0 &kp BSPC
   &bt BT_CLR &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4      &kp LEFT &kp DOWN &kp UP &kp RIGHT &trans &trans
   &kp LSHFT  &trans       &trans       &trans       &trans       &trans            &trans   &trans   &trans &trans    &trans &trans
                                        &kp LGUI     &trans       &kp SPACE         &kp RET &trans &kp RALT
                        >;
                };

                raise_layer {
// -----------------------------------------------------------------------------------------
// |  ESC |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
// | CTRL |     |     |     |     |     |   |  -  |  =  |  {  |  }  | "|" |  `   |
// | SHFT |     |     |     |     |     |   |  _  |  +  |  [  |  ]  |  \  |  ~   | // TODO: Fix this row when &mkp is committed
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
   &kp  ESC  &kp EXCL  &kp AT  &kp HASH  &kp DLLR  &kp PRCNT   &kp CARET &kp AMPS  &kp KP_MULTIPLY &kp LPAR &kp RPAR &kp BSPC
   &kp LCTRL &trans    &trans  &trans    &trans    &trans      &kp MINUS &kp EQUAL &kp LBKT        &kp RBKT &kp PIPE &kp GRAVE
   &kp LSHFT &trans    &trans  &trans    &trans    &trans      &trans    &trans    &trans          &trans   &kp BSLH &kp TILDE
                                   &kp LGUI &trans &kp SPACE   &kp RET &trans &kp RALT
                        >;
                };
        };
};

*/